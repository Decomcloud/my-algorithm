package cloud.ry.day16num191;
//编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
//
// 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。 
// 
//
// 
//
// 示例 1： 
//
// 
//输入：00000000000000000000000000001011
//输出：3
//解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
// 
//
// 示例 2： 
//
// 
//输入：00000000000000000000000010000000
//输出：1
//解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
// 
//
// 示例 3： 
//
// 
//输入：11111111111111111111111111111101
//输出：31
//解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。 
//
// 
//
// 提示： 
//
// 
// 输入必须是长度为 32 的 二进制串 。 
// 
//
// 
// 
//
// 
//
// 进阶： 
//
// 
// 如果多次调用这个函数，你将如何优化你的算法？ 
// 
// Related Topics 位运算 👍 461 👎 0

public class num191NumberOf1Bits_recursionByte {
    public static void main(String[] args) {
        Solution solution = new num191NumberOf1Bits_recursionByte().new Solution();
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    public class Solution {
        // you need to treat n as an unsigned value
        public int hammingWeight(int n) {
            int mask2 = 0b01010101010101010101010101010101;
            int mask4 = 0b00110011001100110011001100110011;
            int mask8 = 0b00001111000011110000111100001111;
            int mask16 = 0b00000000111111110000000011111111;
            int mask32 = 0b00000000000000001111111111111111;

            //每两个byte一组的看，统计1的个数；
            n = ((n >>> 1) & mask2) + (n & mask2);
            //每四个一组来看，前两位后移，与后两位相加，得出四位内的1的个数；
            //e.g., 0101表示在上一步中，前两位有一个1 ，后两位有一个1；
            //因此相加后是0010，表示四位中有两个1；
            n = ((n >>> 2) & mask4) + (n & mask4);
            n = ((n >>> 4) & mask8) + (n & mask8);
            n = ((n >>> 8) & mask16) + (n & mask16);
            n = ((n >>> 16) & mask32) + (n & mask32);
            return n;
        }

    }
//leetcode submit region end(Prohibit modification and deletion)

}